using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;               //UI?? ????? ?? ????? ???
using System;                       //Arry ???? ????? ?????? ???? ???

public class DialogSystem : MonoBehaviour
{
    [SerializeField]
    private SpeakerUI[] speakers;                       //????? ??????? ©¦??????? UI ?ò÷
    [SerializeField]
    private DialogData[] dialogs;                       //???? ?¬Ò??? ??? ??? ?ò÷
    [SerializeField]
    private bool DialogInit = true;                     //??? ???? ????
    [SerializeField]
    private bool dialogsDB = false;                     //DB?? ???? ?¬Õ¡Æ? ????

    public int currentDialogIndex = -1;                 //???? ??? ????
    public int currentSpeakerIndex = 0;                 //???? ???? ??? ????? Speakers ?ò÷ ????
    public float typingSpeed = 0.1f;                    //???? ????? ????? ??????
    public bool isTypingEffect = false;                 //???? ????? ????? ????????? ???.

        // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    //????? ???? UI?? ????????? ????????? ????
    private void SetActiveObjects(SpeakerUI speaker, bool visible)  
    {
        speaker.imageDialog.gameObject.SetActive(visible);
        speaker.textName.gameObject.SetActive(visible);
        speaker.textDialogue.gameObject.SetActive(visible);
        //???? ??ÊÛ ???????? ???? ???? ??? ?????? 
        speaker.objectArrow.SetActive(false);

        Color color = speaker.imgCharacter.color;
        if(visible)
        {
            color.a = 1;
        }
        else
        {
            color.a = 0.2f;
        }
        speaker.imgCharacter.color = color;
    }

    private void SetAllClose()
    {
        for (int i = 0; i < speakers.Length; i++)
        {
            SetActiveObjects(speakers[i], false);
        }
    }

    private void SetNextDialog(int currentIndex)
    {
        SetAllClose();
        currentDialogIndex = currentIndex;          //???? ??? ?????????
        currentSpeakerIndex = dialogs[currentDialogIndex].speakerUIindex;       //???? ??? ???? ????
        SetActiveObjects(speakers[currentSpeakerIndex], true);                  //???? ????? ??? ???? ??????? ????
        speakers[currentSpeakerIndex].textName.text = dialogs[currentDialogIndex].name; //???? ????? ??? ???? ????
        StartCoroutine("OnTypingText");
    }

    private IEnumerator OnTypingText()
    {
        int index = 0;
        isTypingEffect = true;

        if(dialogs[currentDialogIndex].characterPath != "None") //None?? ????? DB?? ?????? ????? ©¦???? ??????? ?????¢¥?.
        {
            speakers[currentSpeakerIndex].imgCharacter.sprite =
                Resources.Load<Sprite>(dialogs[currentDialogIndex].characterPath);
        }

        while(index < dialogs[currentDialogIndex].dialogue.Length + 1)
        {
            speakers[currentSpeakerIndex].textDialogue.text =
                dialogs[currentDialogIndex].dialogue.Substring(0, index);   //?????? ?????? ????? ??? 

            index++;
            yield return new WaitForSeconds(typingSpeed);
        }

        isTypingEffect = false;

        speakers[currentSpeakerIndex].objectArrow.SetActive(true);
    }

    public bool UpdateDialog(int currentIndex, bool InitType)
    {
        //??? ?¬Ò? 1??? ??? 
        if(DialogInit == true && InitType == true)
        {
            SetAllClose();
            SetNextDialog(currentIndex);
            DialogInit = false;
        }
        if(Input.GetMouseButtonDown(0))
        {
            if(isTypingEffect == true)
            {
                isTypingEffect = false;
                StopCoroutine("OnTypingText");          //????? ????? ??????? , ???? ??? ????? ??????.
                speakers[currentIndex].textDialogue.text = dialogs[currentDialogIndex].dialogue;
                //??ÊÛ ??????? ?? ¨¨?? 
                speakers[currentSpeakerIndex].objectArrow.SetActive(true);

                return false;
            }

            if(dialogs[currentDialogIndex].nextindex != -100)
            {
                SetNextDialog(dialogs[currentDialogIndex].nextindex);
            }
            else
            {
                SetAllClose();
                DialogInit = true;
                return true;
            }
        }
        return false;
    }

    private void Awake()
    {
        SetAllClose();
    }

    [System.Serializable]
    public struct SpeakerUI
    {
        public Image imgCharacter;          //©¦???? ?????
        public Image imageDialog;           //???? ImageUI
        public Text textName;               //???? ??????? ©¦???? ??? ??? TextUI
        public Text textDialogue;           //???? ??? ??? Text UI
        public GameObject objectArrow;      //??ÊÛ ??????? ?? ?????? ¨¨?? ???????
    }

    [System.Serializable]
    public struct DialogData
    {
        public int index;                   //??? ???
        public int speakerUIindex;          //????¨¨ ?ò÷ ???
        public string name;                 //???
        public string dialogue;             //???
        public string characterPath;        //©¦???? ????? ???
        public int tweenType;               //??? ???
        public int nextindex;               //???? ??? 
    }


}